import tkinter as tk
import pygame
import os
import time
import threading

# Constants
TRACKS_FOLDER = r"D:\faculta\Karaoke Party\Tracks"

# Parse LRC (Lyrics) Files
def parse_lrc(file_path):
    lyrics = []
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            if line.startswith('['):
                try:
                    time_tag = line[line.index('[')+1:line.index(']')]
                    minutes, seconds = time_tag.split(':')
                    total_seconds = int(minutes) * 60 + float(seconds)
                    text = line[line.index(']')+1:].strip()
                    lyrics.append((total_seconds, text))
                except:
                    continue
    return lyrics

# App Class
class KaraokeApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Karaoke Player")
        self.geometry("1000x600")
        self.configure(bg='white')

        pygame.mixer.init()

        self.menu_frame = MenuFrame(self)
        self.karaoke_frame = KaraokeFrame(self)

        self.menu_frame.pack(fill="both", expand=True)

    def show_menu(self):
        self.karaoke_frame.pack_forget()
        self.menu_frame.pack(fill="both", expand=True)

    def show_karaoke(self, song_folder):
        self.menu_frame.pack_forget()
        self.karaoke_frame.load_song(song_folder)
        self.karaoke_frame.pack(fill="both", expand=True)

class MenuFrame(tk.Frame):
    def __init__(self, master):
        super().__init__(master, bg='white')
        self.master = master
        self.load_song_list()

    def load_song_list(self):
        for folder_name in os.listdir(TRACKS_FOLDER):
            folder_path = os.path.join(TRACKS_FOLDER, folder_name)
            if os.path.isdir(folder_path):
                files = os.listdir(folder_path)
                if any(f.endswith('.mp3') for f in files) and any(f.endswith('.lrc') for f in files):
                    song_box = tk.Frame(self, bg='white', highlightbackground="black", highlightthickness=1)
                    song_box.pack(pady=10, padx=20, fill="x")

                    label = tk.Label(song_box, text=folder_name, font=("Arial", 18), bg="white", anchor="w")
                    label.pack(side="left", padx=10, pady=10)

                    play_button = tk.Button(song_box, text="▶️ Play", command=lambda folder=folder_name: self.master.show_karaoke(folder))
                    play_button.pack(side="right", padx=10)

class KaraokeFrame(tk.Frame):
    def __init__(self, master):
        super().__init__(master, bg='white')
        self.master = master
        self.lyrics = []
        self.current_line = 0
        self.playing = False

        self.label = tk.Label(self, text="", font=("Arial", 28), bg="white", wraplength=800)
        self.label.pack(pady=50)

        self.stop_button = tk.Button(self, text="Stop", font=("Arial", 16), command=self.stop_song)
        self.stop_button.pack(pady=20)

        self.back_button = tk.Button(self, text="Back to Menu", font=("Arial", 14), command=self.back_to_menu)
        self.back_button.pack()

    def load_song(self, song_folder):
        folder_path = os.path.join(TRACKS_FOLDER, song_folder)
        audio_file = None
        lrc_file = None

        for file in os.listdir(folder_path):
            if file.endswith('.mp3'):
                audio_file = os.path.join(folder_path, file)
            elif file.endswith('.lrc'):
                lrc_file = os.path.join(folder_path, file)

        if audio_file and lrc_file:
            self.lyrics = parse_lrc(lrc_file)
            self.current_line = 0
            self.start_song(audio_file)

    def start_song(self, audio_path):
        pygame.mixer.music.load(audio_path)
        pygame.mixer.music.play()
        self.playing = True
        threading.Thread(target=self.update_lyrics).start()

    def stop_song(self):
        self.playing = False
        pygame.mixer.music.stop()
        self.label.config(text="")

    def back_to_menu(self):
        self.stop_song()
        self.master.show_menu()

    def update_lyrics(self):
        start_time = time.time()

        while self.playing and self.current_line < len(self.lyrics):
            elapsed = time.time() - start_time
            timestamp, text = self.lyrics[self.current_line]

            if elapsed >= timestamp:
                self.label.config(text=text)
                self.current_line += 1

            time.sleep(0.05)

# Run the App
if __name__ == "__main__":
    app = KaraokeApp()
    app.mainloop()
